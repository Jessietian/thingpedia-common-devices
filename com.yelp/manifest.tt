class @com.yelp
#_[name="Yelp"]
#_[description="Search restaurants on Yelp"]
#_[canonical="yelp"]
{
  import loader from @org.thingpedia.v2();
  import config from @org.thingpedia.config.none(api_key=$?);

  list query restaurant(out id: Entity(com.yelp:restaurant)
                        #[conflict_filter=["cuisines", "price_range"]]
                        #[unique=true]
                        #[string_values="gov.data:restaurant_names"]
                        #_[canonical={
                          default="base",
                          base=["name"],
                          property=[]
                        }],
                        out image_url: Entity(tt:picture)
                        #[filterable=false]
                        #_[canonical={
                          default="base",
                          base=["picture", "image", "photo"]
                        }],
                        out link: Entity(tt:url)
                        #[filterable=false]
                        #_[canonical="link"],
                        out cuisines: Array(Entity(com.yelp:restaurant_cuisine))
                        #[conflict_filter=["id"]]
                        #_[canonical={
                          default="property",
                          base=["cuisines", "types of cuisine", "food", "types of food", "category"],
                          property=["# food", "# cuisine", "# category"],
                          adjective=["#"],
                          verb=["serves # cuisine", "serves # food", "offer # cuisine", "offer # food", "serves", "offers"],
                          preposition=["in the # category"]
                        }],
                        out price : Enum(cheap, moderate, expensive, luxury)
                        #[conflict_filter=["id"]]
                        #_[canonical={
                          default="adjective",
                          base=["price range", "price"],
                          property=[],
                          adjective=["#", "# -ly priced"]
                          // FIXME
                          /*adjective_enum={ expensive=["upscale"] }*/
                        }],
                        out rating: Number
                        #[min_number=1]
                        #[max_number=5]
                        #_[canonical={
                          default="passive_verb",
                          base=["rating", "average rating"],
                          passive_verb=["rated # star"],
                          adjective=["# star"],
                          property=["rating", "# star rating"]
                        }]
                        #_[counted_object="stars"],
                        out reviewCount: Number
                        #_[canonical={
                          default="property",
                          base=["review count"],
                          property=["# reviews"]
                        }]
                        #_[counted_object="reviews"],
                        out geo: Location
                        #_[canonical={
                          default="preposition",
                          base=["address", "location"],
                          preposition=["near #", "in #", "around #"]
                        }],
                        out phone: Entity(tt:phone_number)
                        #[filterable=false]
                        #_[canonical={
                          default="npp",
                          base=["telephone", "phone number"]
                        }])
  #_[canonical="restaurant"]
  #_[confirmation="restaurants on Yelp"]
  #[minimal_projection=["id"]]
  // FIXME default_projection doesn't do what we want here...
  //#[default_projection=["id", "link", "cuisines", "image_url"]]
  #_[formatted=[{
    type="rdl",
    displayTitle="${id}",
    webCallback="${link}",
    //displayText="Category: ${cuisines}\nAddress: ${geo}",
    displayText="Offers ${cuisines} food.",
    pictureUrl="${image_url}"
  }]]
  #[doc="search for restaurants on Yelp"]
  #[confirm=false];
}
